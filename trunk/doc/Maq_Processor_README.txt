Maq File Processor 

Contact: Ben Raphael at braphael@brown.edu
Version Date: May 23, 2009

SUMMARY ==============================================

The Maq file processor is intended to take files generated by the Maq* alignment program and generate Paired-End Sequence (PES) files for use in the GASV program.  This processor is only intended for those who are using Maq to align paired reads.  For more information about Maq, refer to the Maq User's Manual at

http://maq.sourceforge.net/maq-man.shtml

FILE PREPARATION ======================================

This processor requires that the Maq output is divided by chromosome.  If the *.map files generated by Map are already divided into chromosome (1.map,2,map,etc), then run mapview to extract the binary files:

% maq mapview 1.map > 1.out
...
% maq mapview Y.map > 24.out

If there is only 1 .map file (say, data.map), then extract the binary file and split it by chromosome:

% maq mapview data.map > data.out
% awk '($2 == 1) {print $0}' > 1.maq
...
% awk '($2 == Y) {print $0}' > 24.maq

These *.maq files are used by the Maq processor.


COMPILATION ===========================================

Run make_jar_cmd in the GASV_RELEASE base directory to build maqprocessor.jar in lib/


USAGE =================================================

Run maqprocessor.jar without any arguments to see the general usage.

########################################
General Usage: java -jar maqprocessor.jar <mode> [<optional args>] <args>

########################################

#### If <mode> is --valid or -v: ####

This mode determines the valid fragment bounds Lmin and Lmax and prints information to a log file.
Usage: java -jar maqprocessor.jar --valid [<optional args>] <InputDir> <Pattern>

Parameters:
<InputDir>      Directory where extracted maq files are
<Pattern>       Regular Expression (or single file name) to process

Optional Arguments:
-n, --numlines [N,all]  Find up to N valid fragments in each file or 'all' for all lines. Default is 'all'
-l. --logfile <Logfile>         name of log file to output to.  Default is 'out.log'

Output:
<Logfile>       program information, Lmin and Lmax, and a histogram of convergent pairs.

########################################

#### If <mode> is --invalid or -i: ####

This mode takes one or two chromosomes and outputs the invalid fragments.

Single Chromosome Usage : java -jar maqprocessor.jar --invalid [<optional arguments>] <InputFile> <Lmin> <Lmax>
For a single chromosome A, reports all divergent fragments, convergent but incorrectly-sized fragments, inversions, and deletions.

Parameters:
<InputFile>     file for ChrA produced by mapview
<Lmin>  Lmin determined by output file in --valid mode.
<Lmax>  Lmax determined by output file in --valid mode,

Optional Arguments:
-p, --prefix <Prefix>   output file prefix, which can include output directory info and chromosome name.  Default is 'out'
-r, --rmdup      remove duplicate fragments.  See below for description and output files.
--mininvlen N   minimum distance N between inversion breakpoints. Default is 10000
--mindellen N   minimum distance N between deletion breakpoints. Default is 5000

Output:
<Prefix>_inversions.invalid     PES file of inversions >= 10KB
<Prefix>_convergent.invalid     PES file of deletions & insertions
<Prefix>_divergent.invalid      PES file of -/+ oriented fragments
<Prefix>_deletions.invalid      PES file of deletions >= 5KB


Two-Chromosome Usage : java -jar maqprocessor.jar --invalid [<optional arguments>] <InputFileA> <InputFileB>
For chromsomes A and B, reports all translocations from A to B (A is assumed to be less than B).

Parameters:
<InputFileA>    file for ChrA produced by mapview
<InputFileB>    file for ChrB produced by mapview

Optional Arguments:
-p, --prefix <Prefix>   output file prefix, which can include output directory info and chromosome name.  Default is 'out'
-r, --rmdup      remove duplicate fragments.  See below for description and output files.

Output:
<Prefix>_translocations.invalid         PES file of translocations for ChrA and ChrB


If --rmdup is specified, duplicate fragments are removed, where duplicate fragments are fragments mapped to identical coordinates in identical orienataions.  This is similar to Maq's rmdup command, but is extended for invalid pairs.  There are two additional types of output files.
<*.invalid.rmdup>        '*.invalid' file with duplicate reads removed.
<*.invalid.dup>          list of fragments that were kept and duplicate fragments that were removed.


EXAMPLE ===================================================================

# filter invalids from chr1.maq - report ESPs mapped to different chromosomes.
% java -jar maqprocessor.jar --invalid --prefix SampleMaqFiles/1 --rmdup --diffchrom --mininvlen 200 --mindellen 200 SampleMaqFiles/chr1.maq 100 200

# fitler invalids from chr2.maq - report ESPs mapped to different chromosomes.
% java -jar maqprocessor.jar --invalid --prefix SampleMaqFiles/2 --rmdup --diffchrom --mininvlen 200 --mindellen 200 SampleMaqFiles/chr2.maq 100 200

# filter invalid translocations where one read is from chr1.maq.translocations and the other read is from chr2.maq.translocations. 
% java -jar maqprocessor.jar --invalid --prefix SampleMaqFiles/1_2 --rmdup SampleMaqFiles/chr1.maq.translocations SampleMaqFiles/chr2.maq.translocations

REFERENCES ==================================================================

*Li, Ruan, and Durbin, "Mapping Short DNA Sequencing Reads and Calling Variants using Mapping Quality Scores", Genome Res. 2008.
